{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["VERSION","process","App","useState","damage","accuracy","reloadTime","fireRate","magazineSize","formA","setFormA","formB","setFormB","onChange","form","setForm","e","v","target","value","name","parseAllNumbers","data","Object","keys","forEach","key","includes","Number","parseFloat","parseInt","calc","dps","magTime","mag2magDps","gunA","gunB","selectAll","select","percentDelta","a","b","invert","style","color","getSign","Math","round","toString","renderForm","handler","htmlFor","onFocus","type","min","step","renderStats","gun","m2mDps","toFixed","className","rel","href","title","substring","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4c594de.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport \"react-tabs/style/react-tabs.css\";\n\nconst VERSION = process.env.REACT_APP_GIT_COMMIT_HASH || 'dev';\n\nfunction App() {\n  const [formA, setFormA] = useState({damage: \"17\", accuracy: \"60\", reloadTime: \"4.0\", fireRate: \"13.67\", magazineSize: \"60\"});\n  const [formB, setFormB] = useState({damage: \"20\", accuracy: \"80\", reloadTime: \"3.2\", fireRate: \"12.71\", magazineSize: \"44\"});\n\n  function onChange(form, setForm, e) {\n    const v = e.target.value;\n    \n    switch (e.target.name) {\n      case \"damage\": return setForm({...form, damage: v});\n      case \"accuracy\": return setForm({...form, accuracy: v});\n      case \"reloadTime\": return setForm({...form, reloadTime: v});\n      case \"fireRate\": return setForm({...form, fireRate: v});\n      case \"magazineSize\": return setForm({...form, magazineSize: v});\n      default: return;\n    }\n  }\n\n  // Loop through an object and convert all user-defined props to float or integer.\n  // Note: Disregards `,` as the decimal separator for other locales.\n  const parseAllNumbers = (form) => {\n    let data = {};\n  \n    Object.keys(form).forEach(key => \n      data[key] = form[key].includes('.') ? Number.parseFloat(form[key]) : Number.parseInt(form[key], 10)\n    );\n    return data;\n  };\n\n  function calc(form) {\n    const data = parseAllNumbers(form);\n\n    const dps = data.damage * data.fireRate;\n    const magTime = data.magazineSize / data.fireRate\n    const mag2magDps = (dps * magTime) / (magTime + data.reloadTime);\n\n    return {...data, dps, magTime, mag2magDps};\n  }\n\n  const gunA = calc(formA);\n  const gunB = calc(formB);\n\n  const handlerA = (e) => onChange(formA, setFormA, e);\n  const handlerB = (e) => onChange(formB, setFormB, e);\n  const selectAll = (e) => e.target.select();\n\n  const getSign = (a, b) => a < b ? '+' : '';\n  const percentDelta = (a, b, invert) => <td style={a > b ? (invert ? {color: '#00C800'} : {color: 'red'}) : {}}>{getSign(a, b)}{Math.round((b - a) / a * 100).toString()}%</td>;\n\n  function renderForm(form, handler) {\n    return (\n      <form>\n        <table>\n          <tbody>\n            <tr><td><label htmlFor=\"damage\">Damage</label></td><td><input onFocus={selectAll} onChange={handler} name=\"damage\" type=\"number\" value={form.damage.toString()} min=\"0\"/></td></tr>\n            {/*<tr><td><label htmlFor=\"accuracy\">Accuracy</label></td><td><input disabled onChange={handler} name=\"accuracy\" type=\"number\" value={form.accuracy.toString()} min=\"0\" max=\"100\"/></td></tr>*/}\n            {/*<tr><td><label htmlFor=\"handling\">Handling</label></td><td><input onChange={handler} name=\"handling\" type=\"number\" value=\"\" min=\"0\" max=\"100\"/></td></tr>*/}\n            <tr><td><label htmlFor=\"reloadTime\">Reload Time</label></td><td><input onFocus={selectAll} onChange={handler} name=\"reloadTime\" type=\"number\" value={form.reloadTime.toString()} min=\"0\" step=\"0.1\"/></td></tr>\n            <tr><td><label htmlFor=\"fireRate\">Fire Rate</label></td><td><input onFocus={selectAll} onChange={handler} name=\"fireRate\" type=\"number\" value={form.fireRate.toString()} min=\"0\" step=\"0.01\"/></td></tr>\n            <tr><td><label htmlFor=\"magazineSize\">Magazine Size</label></td><td><input onFocus={selectAll} onChange={handler} name=\"magazineSize\" type=\"number\" value={form.magazineSize.toString()} min=\"0\"/></td></tr>\n          </tbody>\n        </table>\n      </form>\n    );\n  }\n\n  function renderStats(gun, gunA) {\n    const dps = Math.round(gun.dps).toString();\n    const m2mDps = Math.round(gun.mag2magDps).toString();\n\n    return (\n      <table>\n        <tbody>\n        <tr><td>Mag-2-Mag DPS:</td><td>{m2mDps}</td>{gunA && percentDelta(gunA.mag2magDps, gun.mag2magDps)}</tr>\n        <tr><td>Base DPS:</td><td>{dps}</td>{gunA && percentDelta(gunA.dps, gun.dps)}</tr>\n        {gunA && <tr><td>Fire Rate:</td><td>{(gun.fireRate - gunA.fireRate).toFixed(2)}</td>{percentDelta(gunA.fireRate, gun.fireRate)}</tr>}\n        {gunA && <tr><td>Reload time:</td><td>{(gun.reloadTime - gunA.reloadTime).toFixed(2)}</td>{percentDelta(gunA.reloadTime, gun.reloadTime, true)}</tr>}\n        {gunA && <tr><td>Magazine Size:</td><td>{(gun.magazineSize - gunA.magazineSize).toFixed(2)}</td>{percentDelta(gunA.magazineSize, gun.magazineSize)}</tr>}\n        </tbody>\n      </table>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Borderlands DPS Calc</h2>\n      </header>\n      <main>\n        <Tabs>\n          <TabList>\n            <Tab>Gun A</Tab>\n            <Tab>Gun B</Tab>\n          </TabList>\n          <TabPanel>\n            <div className=\"flex flexColumn\">\n              <span>Gun A</span>\n              {renderForm(formA, handlerA)}\n            </div>\n            <div className=\"flex flexColumn\">\n              <h2>Stats</h2>\n              {renderStats(gunA)}\n            </div>\n          </TabPanel>\n          <TabPanel>\n            <div className=\"flex flexColumn\">\n              <span>Gun B</span>\n              {renderForm(formB, handlerB)}\n            </div>\n            <div className=\"flex flexColumn\">\n              <h2>Stats</h2>\n              {renderStats(gunB, gunA)}\n            </div>\n          </TabPanel>\n        </Tabs>\n      </main>\n      <footer>\n        <h6><a rel=\"author\" href=\"https://twitter.com/nearwood\">@nearwood</a> <a href=\"https://github.com/nearwood/bl-dps-calc\">GitHub</a> <span title=\"version\">{VERSION.substring(0, 7)}</span></h6>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}