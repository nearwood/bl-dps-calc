{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["VERSION","process","App","useState","damage","accuracy","reloadTime","fireRate","magazineSize","formA","setFormA","formB","setFormB","onChange","form","setForm","e","v","target","value","name","Number","parseInt","parseFloat","calc","dps","magTime","mag2magDps","gunA","gunB","selectAll","select","percentDelta","a","b","invert","style","color","getSign","Math","round","toString","renderForm","handler","htmlFor","onFocus","type","min","step","renderStats","gun","m2mDps","toFixed","className","rel","href","title","substring","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f199774c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst VERSION = process.env.REACT_APP_GIT_COMMIT_HASH || 'dev';\n\nfunction App() {\n  const [formA, setFormA] = useState({damage: 17, accuracy: 60, reloadTime: 4.0, fireRate: 13.67, magazineSize: 60});\n  const [formB, setFormB] = useState({damage: 20, accuracy: 80, reloadTime: 3.2, fireRate: 12.71, magazineSize: 44});\n\n  function onChange(form, setForm, e) {\n    const v = e.target.value;\n    \n    switch (e.target.name) {\n      case \"damage\": return setForm({...form, damage: Number.parseInt(v)});\n      case \"accuracy\": return setForm({...form, accuracy: Number.parseInt(v)});\n      case \"reloadTime\": return setForm({...form, reloadTime: Number.parseFloat(v)});\n      case \"fireRate\": return setForm({...form, fireRate: Number.parseFloat(v)});\n      case \"magazineSize\": return setForm({...form, magazineSize: Number.parseInt(v)});\n      default: return;\n    }\n  }\n\n  function calc(form) {\n    const dps = form.damage * form.fireRate;\n    const magTime = form.magazineSize / form.fireRate\n    const mag2magDps = (dps * magTime) / (magTime + form.reloadTime);\n\n    return {dps, magTime, mag2magDps};\n  }\n\n  const gunA = calc(formA);\n  const gunB = calc(formB);\n\n  const handlerA = (e) => onChange(formA, setFormA, e);\n  const handlerB = (e) => onChange(formB, setFormB, e);\n  const selectAll = (e) => e.target.select();\n\n  const getSign = (a, b) => a < b ? '+' : '';\n  const percentDelta = (a, b, invert) => <td style={a > b ? (invert ? {color: '#00C800'} : {color: 'red'}) : {}}>{getSign(a, b)}{Math.round((b - a) / a * 100).toString()}%</td>;\n\n  function renderForm(form, handler) {\n    return (\n      <table>\n        <tbody>\n        <tr><td><label htmlFor=\"damage\">Damage</label></td><td><input onFocus={selectAll} onChange={handler} name=\"damage\" type=\"number\" value={form.damage.toString()} min=\"0\"/></td></tr>\n        {/*<tr><td><label htmlFor=\"accuracy\">Accuracy</label></td><td><input disabled onChange={handler} name=\"accuracy\" type=\"number\" value={form.accuracy.toString()} min=\"0\" max=\"100\"/></td></tr>*/}\n        {/*<tr><td><label htmlFor=\"handling\">Handling</label></td><td><input onChange={handler} name=\"handling\" type=\"number\" value=\"\" min=\"0\" max=\"100\"/></td></tr>*/}\n        <tr><td><label htmlFor=\"reloadTime\">Reload Time</label></td><td><input onFocus={selectAll} onChange={handler} name=\"reloadTime\" type=\"number\" value={form.reloadTime.toString()} min=\"0\" step=\"0.1\"/></td></tr>\n        <tr><td><label htmlFor=\"fireRate\">Fire Rate</label></td><td><input onFocus={selectAll} onChange={handler} name=\"fireRate\" type=\"number\" value={form.fireRate.toString()} min=\"0\" step=\"0.01\"/></td></tr>\n        <tr><td><label htmlFor=\"magazineSize\">Magazine Size</label></td><td><input onFocus={selectAll} onChange={handler} name=\"magazineSize\" type=\"number\" value={form.magazineSize.toString()} min=\"0\"/></td></tr>\n        </tbody>\n      </table>\n    );\n  }\n\n  function renderStats(form, gun, formA, gunA) {\n    const dps = Math.round(gun.dps).toString();\n    const m2mDps = Math.round(gun.mag2magDps).toString();\n\n    return (\n      <table>\n        <tbody>\n        <tr><td>Mag-2-Mag DPS:</td><td>{m2mDps}</td>{gunA && percentDelta(gunA.mag2magDps, gun.mag2magDps)}</tr>\n        <tr><td>Base DPS:</td><td>{dps}</td>{gunA && percentDelta(gunA.dps, gun.dps)}</tr>\n        {gunA && <tr><td>Fire Rate:</td><td>{(form.fireRate - formA.fireRate).toFixed(2)}</td>{percentDelta(formA.fireRate, form.fireRate)}</tr>}\n        {gunA && <tr><td>Reload time:</td><td>{(form.reloadTime - formA.reloadTime).toFixed(2)}</td>{percentDelta(formA.reloadTime, form.reloadTime, true)}</tr>}\n        {gunA && <tr><td>Magazine Size:</td><td>{(form.magazineSize - formA.magazineSize).toFixed(2)}</td>{percentDelta(formA.magazineSize, form.magazineSize)}</tr>}\n        </tbody>\n      </table>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Borderlands DPS Calc</h2>\n      </header>\n      <main>\n        <div className=\"cell flex flexColumn\">\n          <span>Gun A</span>\n          {renderForm(formA, handlerA)}\n        </div>\n        <div className=\"cell flex flexColumn\">\n          <span>Gun B</span>\n          {renderForm(formB, handlerB)}\n        </div>\n        <div className=\"cell flex flexColumn\">\n          <h2>Stats</h2>\n          {renderStats(formA, gunA)}\n        </div>\n        <div className=\"cell flex flexColumn\">\n          <h2>Stats</h2>\n          {renderStats(formB, gunB, formA, gunA)}\n        </div>\n      </main>\n      <footer>\n        <h6><a rel=\"author\" href=\"https://twitter.com/nearwood\">@nearwood</a> <a href=\"https://github.com/nearwood/bl-dps-calc\">GitHub</a> <span title=\"version\">{VERSION.substring(0, 7)}</span></h6>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}